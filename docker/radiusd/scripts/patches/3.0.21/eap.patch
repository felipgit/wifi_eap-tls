--- eap.orig
+++ eap
@@ -24,7 +24,7 @@
 	#  then that EAP type takes precedence over the
 	#  default type configured here.
 	#
-	default_eap_type = md5
+	default_eap_type = tls
 
 	#  A list is maintained to correlate EAP-Response
 	#  packets with EAP-Request packets.  After a
@@ -77,8 +77,8 @@
 	#  for wireless connections.  It is insecure, and does
 	#  not provide for dynamic WEP keys.
 	#
-	md5 {
-	}
+#	md5 {
+#	}
 
 
 	#  EAP-pwd -- secure password-based authentication
@@ -115,8 +115,8 @@
 	#  User-Password, or the NT-Password attributes.
 	#  'System' authentication is impossible with LEAP.
 	#
-	leap {
-	}
+#	leap {
+#	}
 
 
 	#  EAP-GTC -- Generic Token Card
@@ -130,7 +130,7 @@
 	#  the users password will go over the wire in plain-text,
 	#  for anyone to see.
 	#
-	gtc {
+#	gtc {
 		#  The default challenge, which many clients
 		#  ignore..
 		#
@@ -148,8 +148,8 @@
 		#  configured for the request, and do the
 		#  authentication itself.
 		#
-		auth_type = PAP
-	}
+#		auth_type = PAP
+#	}
 
 
 	#  Common TLS configuration for TLS-based EAP types
@@ -231,7 +231,7 @@
 		#  In that case, this CA file should contain
 		#  *one* CA certificate.
 		#
-		ca_file = ${cadir}/ca.pem
+		ca_file = ${cadir}/wifi_ca_crl.pem
 
 	 	#  OpenSSL will automatically create certificate chains,
 	 	#  unless we tell it to not do that.  The problem is that
@@ -321,16 +321,16 @@
 		#     'c_rehash' is OpenSSL's command.
 		#  3) uncomment the lines below.
 		#  5) Restart radiusd
-	#	check_crl = yes
+		check_crl = yes
 
 		# Check if intermediate CAs have been revoked.
-	#	check_all_crl = yes
+		check_all_crl = yes
 
 		ca_path = ${cadir}
 
 		# Accept an expired Certificate Revocation List
 		#
-	#	allow_expired_crl = no
+		allow_expired_crl = no
 
 		#  If check_cert_issuer is set, the value will
 		#  be checked against the DN of the issuer in
@@ -368,7 +368,7 @@
 		#
 		#  For EAP-FAST, use "ALL:!EXPORT:!eNULL:!SSLv2"
 		#
-		cipher_list = "DEFAULT"
+		cipher_list = "HIGH"
 
 		#  If enabled, OpenSSL will use server cipher list
 		#  (possibly defined by cipher_list option above)
@@ -392,8 +392,8 @@
 		#  tls_max_version.
 		#
 	#	disable_tlsv1_2 = no
-		disable_tlsv1_1 = yes
-		disable_tlsv1 = yes
+#		disable_tlsv1_1 = yes
+#		disable_tlsv1 = yes
 
 		#  Set min / max TLS version.  Mainly for Debian
 		#  "trusty", which disables older versions of TLS, and
@@ -663,7 +663,7 @@
 		#  virtual server has access to these attributes, and can
 		#  be used to accept or reject the request.
 		#
-	#	virtual_server = check-eap-tls
+		virtual_server = check-eap-tls
 	}
 
 
@@ -675,7 +675,7 @@
 	#
 	#  Surprisingly, it works quite well.
 	#
-	ttls {
+#	ttls {
 		#  Which tls-config section the TLS negotiation parameters
 		#  are in - see EAP-TLS above for an explanation.
 		#
@@ -685,7 +685,7 @@
 		#  above. If that is done, the tls= option here (and in
 		#  tls above) MUST be commented out.
 		#
-		tls = tls-common
+#		tls = tls-common
 
 		#  The tunneled EAP session needs a default EAP type
 		#  which is separate from the one for the non-tunneled
@@ -694,7 +694,7 @@
 		#  EAP conversation, then this configuration entry is
 		#  ignored.
 		#
-		default_eap_type = md5
+#		default_eap_type = md5
 
 		#  The tunneled authentication request does not usually
 		#  contain useful attributes like 'Calling-Station-Id',
@@ -710,7 +710,7 @@
 		#
 		#  allowed values: {no, yes}
 		#
-		copy_request_to_tunnel = no
+#		copy_request_to_tunnel = no
 
 		#  As of version 3.0.5, this configuration item
 		#  is deprecated.  Instead, you should use
@@ -731,7 +731,7 @@
 		#
 		#  allowed values: {no, yes}
 		#
-		use_tunneled_reply = no
+#		use_tunneled_reply = no
 
 		#  The inner tunneled request can be sent
 		#  through a virtual server constructed
@@ -739,7 +739,7 @@
 		#
 		#  A virtual server MUST be specified.
 		#
-		virtual_server = "inner-tunnel"
+#		virtual_server = "inner-tunnel"
 
 		#  This has the same meaning, and overwrites, the
 		#  same field in the "tls" configuration, above.
@@ -761,7 +761,7 @@
 		#  to be usable for most people.
 		#
 	#	require_client_cert = yes
-	}
+#	}
 
 
 	#  EAP-PEAP
@@ -801,7 +801,7 @@
 	#  EAP module.  Inside of the TLS/PEAP tunnel, we
 	#  recommend using EAP-MS-CHAPv2.
 	#
-	peap {
+#	peap {
 		#  Which tls-config section the TLS negotiation parameters
 		#  are in - see EAP-TLS above for an explanation.
 		#
@@ -811,7 +811,7 @@
 		#  above. If that is done, the tls= option here (and in
 		#  tls above) MUST be commented out.
 		#
-		tls = tls-common
+#		tls = tls-common
 
 		#  The tunneled EAP session needs a default
 		#  EAP type which is separate from the one for
@@ -820,12 +820,12 @@
 		#  as that is the default type supported by
 		#  Windows clients.
 		#
-		default_eap_type = mschapv2
+#		default_eap_type = mschapv2
 
 		#  The PEAP module also has these configuration
 		#  items, which are the same as for TTLS.
 		#
-		copy_request_to_tunnel = no
+#		copy_request_to_tunnel = no
 
 		#  As of version 3.0.5, this configuration item
 		#  is deprecated.  Instead, you should use
@@ -836,7 +836,7 @@
 		#
 		#  This will cache attributes for the final Access-Accept.
 		#
-		use_tunneled_reply = no
+#		use_tunneled_reply = no
 
 		#  When the tunneled session is proxied, the
 		#  home server may not understand EAP-MSCHAP-V2.
@@ -851,7 +851,7 @@
 		#
 		#  A virtual server MUST be specified.
 		#
-		virtual_server = "inner-tunnel"
+#		virtual_server = "inner-tunnel"
 
 		#  This option enables support for MS-SoH
 		#  see doc/SoH.txt for more info.
@@ -877,7 +877,7 @@
 		#  be usable for most people.
 		#
 	#	require_client_cert = yes
-	}
+#	}
 
 
 	#  EAP-MSCHAPv2
@@ -893,7 +893,7 @@
 	#  of MS-CHAPv2 in EAP by Cisco, which FreeRADIUS does not
 	#  currently support.
 	#
-	mschapv2 {
+#	mschapv2 {
 		#  Prior to version 2.1.11, the module never
 		#  sent the MS-CHAP-Error message to the
 		#  client.  This worked, but it had issues
@@ -918,7 +918,7 @@
 		#  identify it.
 		#
 	#	identity = "FreeRADIUS"
-	}
+#	}
 
 
 	#  EAP-FAST
