#!/usr/bin/env sh

# Add or remove accounts for EAP-TLS authentication

set -e
. "${SCRIPTDIR}/config.sh"
. "${SCRIPTDIR}/sharedfunctions.sh"
umask 0027

cd "${CERTSDIR}" || exit 1

if [ "$#" -le 1 ]; then
    /usr/bin/printf "Add user: manageusers.sh add <name> <email> <validity in days> <vlan> <password>\n"
    /usr/bin/printf "Use \"-\" for default e-mail construction and validity and autogenerated password.\n"
    /usr/bin/printf "No VLAN is assigned when \"-\" is used.\n"
    /usr/bin/printf "Example usage: ./manageusers.sh add testpc - - 10 -\n"
    /usr/bin/printf "This generates a certificate for user \"testpc\" with default validity,\n"
    /usr/bin/printf "and autogenerated password. When connecting via Wifi the host is placed\n"
    /usr/bin/printf "in VLAN 10, if the Wifi access point supports it.\n"
    /usr/bin/printf "Remove user: ./manageusers.sh remove <name>\n"
    /usr/bin/printf "Certificate of user is revoked and user is removed from the authorize file.\n"
    /usr/bin/printf "WARNING: the script doesn't do any checking. Only happy flow is tested.\n"
    exit 1
fi

add() {
    USER=$1
    if [ "$2" = "-" ]; then
        if [ -z "${USER##*@*}" ]; then
            # Username contains @. It is assumed this is an email address
            EMAIL=${USER}
        else
            # Construct fake email from username
            EMAIL=${USER}@localhost
        fi
    else
        EMAIL=$2
    fi
    if [ "$3" = "-" ]; then
        VALIDITY=${HOST_CERT_LIFETIME}
    else
        VALIDITY=$3
    fi

    if [ "$4" = "-" ]; then
        VLAN="NONE"
    else
        VLAN=$4
    fi

    if [ "$5" = "-" ]; then
        PASSWORD=$(password)
    else
        PASSWORD=$5
    fi

    set_value "default_days" "${VALIDITY}" "${CLIENTCONFIG}"
    set_value "input_password" "${PASSWORD}" "${CLIENTCONFIG}"
    set_value "output_password" "${PASSWORD}" "${CLIENTCONFIG}"
    set_value_in_section "client" "emailAddress" "${EMAIL}" "${CLIENTCONFIG}"
    set_value_in_section "client" "commonName" "${USER}" "${CLIENTCONFIG}"
    cd "${CERTSDIR}" || exit 1
    /usr/bin/make client.pem
    /bin/cp client.p12 "/provision/${USER}.p12"
    /usr/bin/printf "${USER} ${EMAIL} ${PASSWORD}\n" >> "${PASSWORDFILE}"
    /usr/bin/printf "The password for user ${USER} is: \n"
    /usr/bin/printf "${PASSWORD}\n"
    if [ ! "${VLAN}" = "NONE" ]; then
        sed -i "1s/^/        Tunnel-Type = VLAN,\n        Tunnel-Medium-Type = IEEE-802,\n        Tunnel-Private-Group-ID = \"${VLAN}\"\n\n/" "${USERFILE}"
        sed -i "1s/^/${USER}\n/" "${USERFILE}"
    else
        sed -i "1s/^/${USER}\n\n/" "${USERFILE}"
    fi
    copy_generic_to_provision
}

remove() {
    USER=$1
    SERIAL=$(grep "^V.*\/CN=${USER}\/" "${CERTINDEX}" | awk '{print $3}')
    if [ -z "${SERIAL}" ]; then
        /usr/bin/printf "User ${USER} is not found\n"
        exit 0
    else
        /bin/cp "${USERFILE}" "${USERFILE}".backup
        /bin/cp "${PASSWORDFILE}" "${PASSWORDFILE}".backup
        # Following statement adapted from Makefile in certs dir
        PASSWORD_CA=$(grep output_password "${CACONFIG}" | sed 's/.*=//;s/^ *//')
        /usr/bin/openssl ca -revoke "${SERIAL}".pem -keyfile ca.key -cert ca.pem -config ./ca.cnf -key "${PASSWORD_CA}"
        /usr/bin/awk "BEGIN{flag=1}/^${USER}$/{flag=0}/^$/{flag=1}flag" "${USERFILE}".backup|sed 'N;/^\n$/D;P;D;' > "${USERFILE}"
        grep -v "^${USER} " "${PASSWORDFILE}.backup" > "${PASSWORDFILE}"
        generate_crl "${PASSWORD_CA}"
    fi
}

if [ "$1" = "add" ]; then
    add "$2" "$3" "$4" "$5" "$6"
elif [ "$1" = "remove" ]; then
    remove "$2"
fi

